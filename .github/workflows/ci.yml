# this ci pipeline will build, test and publish (can but currently does not) artifacts for linux, win, macosx

name: CI

on:
  push:
    branches: [ main, "*-dev*" ]
  pull_request:
    branches: [ main, "*-dev*" ]

jobs:
  build:
    name: ${{ matrix.name }}

    env:
      CHECK_DOC: "0"
      CCACHE_SIZE: "100M"
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: "1"
      PYTHON_DEBUG: "1"
      SDK_URL: https://bitcoincore.org/depends-sources/sdks

    strategy:
      fail-fast: false
      matrix:
        name:
          - armhf-linux
          - aarch64-linux
          - x86_64-linux-dbg
          - x86_64-macos
          - x86_64-win
          - i686-win
          - i686-linux
        include:
          - name: armhf-linux
            host: arm-linux-gnueabihf
            os: ubuntu-20.04
            packages: g++-arm-linux-gnueabihf
            dep-opts: "CROSS_COMPILE='yes'"
            config-opts: "LIBTOOL_APP_LDFLAGS='-all-static' --enable-glibc-back-compat LDFLAGS=-static-libstdc++  --enable-static --disable-shared"
            run-tests: false
            goal: install
          - name: aarch64-linux
            host: aarch64-linux-gnu
            os: ubuntu-20.04
            packages: g++-aarch64-linux-gnu
            dep-opts: "CROSS_COMPILE='yes'"
            config-opts: "LIBTOOL_APP_LDFLAGS='-all-static' --enable-glibc-back-compat LDFLAGS='-static' --enable-static --disable-shared"
            run-tests: false
            goal: install
          - name: x86_64-linux-dbg
            host: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            run-tests: true
            dep-opts: "DEBUG=1"
            config-opts: "--enable-static --disable-shared"
            goal: install
          - name: x86_64-macos
            host: x86_64-apple-darwin11
            os: macos-latest
            run-tests: false
            dep-opts: ""
            config-opts: "--enable-static --disable-shared"
            packages: cmake libcap-dev libz-dev libtinfo5 xorriso
            goal: install
            sdk: 10.11
          - name: x86_64-win
            host: x86_64-w64-mingw32
            arch: "i386"
            os: ubuntu-20.04
            packages: python3 nsis g++-mingw-w64-x86-64 wine-stable bc wine-binfmt
            postinstall: |
              sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
              sudo update-binfmts --import /usr/share/binfmts/wine
            dep-opts: "CROSS_COMPILE='yes' CFLAGS='-s -static --static -fPIC' LIBTOOL_APP_LDFLAGS='-all-static' LDFLAGS='-static-libgcc -static-libstdc++'"
            config-opts: "LD_LIBRARY_PATH='`pwd`/depends/x86_64-w64-mingw32/lib/' CFLAGS='-I`pwd`/depends/x86_64-w64-mingw32/include/ -s -static --static -fPIC' LDFLAGS='-L`pwd`/depends/x86_64-w64-mingw32/lib/' PKG_CONFIG_PATH=`pwd`/depends/x86_64-w64-mingw32/lib/pkgconfig --enable-static --disable-shared"
            run-tests: true
            goal: install
          - name: i686-win
            host: i686-w64-mingw32
            arch: "i386"
            os: ubuntu-20.04
            packages: python3 nsis g++-mingw-w64 wine-stable bc wine-binfmt
            postinstall: |
              sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
              sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
              sudo update-binfmts --import /usr/share/binfmts/wine
            dep-opts: "CROSS_COMPILE='yes' CFLAGS='-s -static --static -fPIC' LIBTOOL_APP_LDFLAGS='-all-static' LDFLAGS='-static-libgcc -static-libstdc++'"
            config-opts: "LD_LIBRARY_PATH='`pwd`/depends/i686-w64-mingw32/lib/' CFLAGS='-I`pwd`/depends/i686-w64-mingw32/include/ -s -static --static -fPIC' LDFLAGS='-L`pwd`/depends/i686-w64-mingw32/lib/' PKG_CONFIG_PATH=`pwd`/depends/i686-w64-mingw32/lib/pkgconfig --enable-static --disable-shared"
            run-tests: false
            goal: install
          - name: i686-linux
            host: i686-pc-linux-gnu
            os: ubuntu-18.04
            packages: g++-multilib bc
            run-tests: false
            dep-opts: ""
            config-opts: "--enable-glibc-back-compat LDFLAGS=-static-libstdc++ --enable-static --disable-shared"
            goal: install

    runs-on: ${{ matrix.os }}

    steps:
      - name: add architecture
        if: ${{ matrix.arch }}
        run: |
          sudo dpkg --add-architecture ${{ matrix.arch }}

      - name: install packages
        run: |
          if ([ "${{ matrix.name }}" == "i686-win" ]); then
            sudo add-apt-repository --remove ppa:ubuntu-wine/ppa
            sudo add-apt-repository --remove ppa:cybolic/vineyard-testing
            sudo add-apt-repository -r 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main'
            wget https://dl.winehq.org/wine-builds/Release.key
            sudo apt-key add Release.key
            wget -nc https://dl.winehq.org/wine-builds/winehq.key
            sudo mv winehq.key /usr/share/keyrings/winehq-archive.key
            wget -nc https://dl.winehq.org/wine-builds/ubuntu/dists/focal/winehq-focal.sources -O winehq-focal.sources
            sudo mv winehq-focal.sources /etc/apt/sources.list.d/
          fi
            sudo apt-get update
            sudo apt-get install autoconf automake libtool-bin libevent-dev build-essential curl python3 valgrind
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ${{ matrix.packages }}

      - name: post install
        if: ${{ matrix.postinstall }}
        run: ${{ matrix.postinstall }}

      - name: checkout
        uses: actions/checkout@v2

      - name: sdk cache
        if: ${{ matrix.sdk }}
        uses: actions/cache@v2
        env:
          cache-name: sdk
        with:
          path: ./depends/sdk-sources
          key: ${{ matrix.name }}-${{ env.cache-name }}

      - name: install sdk
        if: ${{ matrix.sdk }}
        run: |
          mkdir -p ./depends/sdk-sources
          mkdir -p ./depends/SDKs
          curl --location --fail $SDK_URL/MacOSX${{ matrix.sdk }}.sdk.tar.gz -o depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz
          tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz

      - name: dependency cache
        uses: actions/cache@v2
        env:
          cache-name: depends
        with:
          path: ./depends/built
          key: ${{ matrix.name }}-${{ env.cache-name }}-${{ hashFiles('depends/packages/*') }}

      - name: build depends
        run: |
          make $MAKEJOBS -C depends HOST=${{ matrix.host }} ${{ matrix.dep-opts }}

      - name: ccache
        uses: actions/cache@v2
        env:
          cache-name: ccache
        with:
          path: ~/.ccache
          key: ${{ matrix.name }}-${{ env.cache-name }}-${{ hashFiles('**/configure.ac') }}

      - name: configure libdogecoin
        run: |
          depends/${{ matrix.host }}/native/bin/ccache --max-size=$CCACHE_SIZE
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/${{ matrix.host }} ${{ matrix.config-opts }} HOST=${{ matrix.host }} || ( cat config.log && false)

      - name: build libdogecoin
        run: |
          make -j"$(getconf _NPROCESSORS_ONLN)" SPEED=slow V=1
          mkdir -p ./build/libdogecoin-${{ github.sha }}-${{ matrix.name }}
          if ([ "${{ matrix.name }}" == "x86_64-win" ] || [ "${{ matrix.name }}" == "i686-win" ]); then
              mv libdogecoin.la such.exe sendtx.exe tests.exe ./build/libdogecoin-${{ github.sha }}-${{ matrix.name }}/
          else
              mv libdogecoin.la such sendtx tests ./build/libdogecoin-${{ github.sha }}-${{ matrix.name }}/
          fi
          chmod +x ./build/libdogecoin-${{ github.sha }}-${{ matrix.name }}/*

      - name: test libdogecoin
        if: ${{ matrix.run-tests }}
        run: |
            make check -j"$(getconf _NPROCESSORS_ONLN)" V=1
            # python3 tooltests.py
            if ([ "${{ matrix.name }}" == "" ]); then
                python3 -m unittest bindings/py_wrappers/pytest/address_test.py
            fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libdogecoin-${{ github.sha }}-${{ matrix.name }}
          path: |
            ${{ github.workspace }}/build/libdogecoin-${{ github.sha }}-${{ matrix.name }}