#!/usr/bin/env python3

# Copyright 2022 raffecat
# Copyright 2022 The Dogecoin Foundation
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

ops = [
    "OP_1NEGATE",
    "OP_INVALID_80",
    "OP_1",
    "OP_2",
    "OP_3",
    "OP_4",
    "OP_5",
    "OP_6",
    "OP_7",
    "OP_8",
    "OP_9",
    "OP_10",
    "OP_11",
    "OP_12",
    "OP_13",
    "OP_14",
    "OP_15",
    "OP_16",
    "OP_NOP",
    "OP_VER",
    "OP_IF",
    "OP_NOTIF",
    "OP_VERIF",
    "OP_VERNOTIF",
    "OP_ELSE",
    "OP_ENDIF",
    "OP_VERIFY",
    "OP_RETURN",
    "OP_TOALTSTACK",
    "OP_FROMALTSTACK",
    "OP_2DROP",
    "OP_2DUP",
    "OP_3DUP",
    "OP_2OVER",
    "OP_2ROT",
    "OP_2SWAP",
    "OP_IFDUP",
    "OP_DEPTH",
    "OP_DROP",
    "OP_DUP",
    "OP_NIP",
    "OP_OVER",
    "OP_PICK",
    "OP_ROLL",
    "OP_ROT",
    "OP_SWAP",
    "OP_TUCK",
    "OP_CAT",
    "OP_SUBSTR",
    "OP_LEFT",
    "OP_RIGHT",
    "OP_SIZE",
    "OP_INVERT",
    "OP_AND",
    "OP_OR",
    "OP_XOR",
    "OP_EQUAL",
    "OP_EQUALVERIFY",
    "OP_RESERVED1",
    "OP_RESERVED2",
    "OP_1ADD",
    "OP_1SUB",
    "OP_2MUL",
    "OP_2DIV",
    "OP_NEGATE",
    "OP_ABS",
    "OP_NOT",
    "OP_0NOTEQUAL",
    "OP_ADD",
    "OP_SUB",
    "OP_MUL",
    "OP_DIV",
    "OP_MOD",
    "OP_LSHIFT",
    "OP_RSHIFT",
    "OP_BOOLAND",
    "OP_BOOLOR",
    "OP_NUMEQUAL",
    "OP_NUMEQUALVERIFY",
    "OP_NUMNOTEQUAL",
    "OP_LESSTHAN",
    "OP_GREATERTHAN",
    "OP_LESSTHANOREQUAL",
    "OP_GREATERTHANOREQUAL",
    "OP_MIN",
    "OP_MAX",
    "OP_WITHIN",
    "OP_RIPEMD160",
    "OP_SHA1",
    "OP_SHA256",
    "OP_HASH160",
    "OP_HASH256",
    "OP_CODESEPARATOR",
    "OP_CHECKSIG",
    "OP_CHECKSIGVERIFY",
    "OP_CHECKMULTISIG",
    "OP_CHECKMULTISIGVERIFY",
    "OP_NOP1",
    "OP_NOP2_CHECKLOCKTIMEVERIFY",
    "OP_NOP3",
    "OP_NOP4",
    "OP_NOP5",
    "OP_NOP6",
    "OP_NOP7",
    "OP_NOP8",
    "OP_NOP9",
    "OP_NOP10",
]

print("// WARNING: ensure no gaps in the range: 79..185")
print("static const char* op_table[] = {")
print("    // generated by gen-ops.py")
print("    // <length> <space> <TOKEN>")

n = 79
for op in ops:
    prefix = hex(len(op)+1)[2:].rjust(2,'0')
    print(f'    "\\x{prefix} {op}", // {n} {hex(n)}')
    n += 1

print("};")


tpl_ops = [
    "OP_SMALLINTEGER",
    "OP_PUBKEYS",
    "OP_0xfc",
    "OP_PUBKEYHASH",
    "OP_PUBKEY",
    "OP_INVALIDOPCODE",
]

print("")
print("static const char* op_tpl_ops[] = {")
print("    // template matching params (not valid in script)")

n = 250
for op in tpl_ops:
    #chars = ",".join(f"'{c}'" for c in op)
    prefix = hex(len(op)+1)[2:].rjust(2,'0')
    print(f'    "\\x{prefix} {op}", // {n} {hex(n)}')
    #code = f"    {{ '\\x{prefix}', {chars} }},"
    #print(f"{code} // {n} {hex(n)}")
    n += 1

print("};")
